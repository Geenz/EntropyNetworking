name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  workflow_call:

env:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - { cc: gcc-14, cxx: g++-14 }
          - { cc: clang-18, cxx: clang++-18 }

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build cmake pkg-config

    - name: Install compiler
      run: |
        if [[ "${{ matrix.compiler.cc }}" == gcc-* ]]; then
          sudo apt-get install -y ${{ matrix.compiler.cc }} ${{ matrix.compiler.cxx }}
        elif [[ "${{ matrix.compiler.cc }}" == clang-* ]]; then
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y libc++-18-dev libc++abi-18-dev
        fi

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'c59b04f668d20c7dd83f478835e8266a3cc51270'

    - name: Setup vcpkg binary caching
      run: |
        echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV

    - name: Configure CMake (Debug)
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
      run: |
        cmake -B build-debug -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=OFF

    - name: Configure CMake (Release)
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
      run: |
        cmake -B build-release -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=OFF

    - name: Build (Debug)
      run: cmake --build build-debug --parallel

    - name: Test (Debug)
      run: ctest --test-dir build-debug --output-on-failure

    - name: Build (Release)
      run: cmake --build build-release --parallel

    - name: Install (Debug)
      run: cmake --install build-debug --prefix build/install/debug

    - name: Install (Release)
      run: cmake --install build-release --prefix build/install

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EntropyNetworking-Linux-${{ matrix.compiler.cc }}
        path: |
          build/install/
        if-no-files-found: error

  build-macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew install ninja cmake pkg-config

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'c59b04f668d20c7dd83f478835e8266a3cc51270'

    - name: Setup vcpkg binary caching
      run: |
        echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV

    - name: Configure CMake
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_TARGET_TRIPLET=arm64-osx \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=OFF

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Test
      run: ctest --test-dir build --output-on-failure

    - name: Install to staging directory
      run: |
        cmake --install build --prefix build/install

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EntropyNetworking-macOS-universal
        path: |
          build/install/
        if-no-files-found: error
