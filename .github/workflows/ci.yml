name: CI

on:
  workflow_call:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

jobs:
  build-and-test-windows:
    name: Build and test (Windows, MSVC)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '271a5b8850aa50f9a40269cbf3cf414b36e333d6'

      - name: Configure CMake (VS 2022, x64, Release)
        run: >
          cmake -S . -B build
          -G "Visual Studio 17 2022" -A x64
          -DBUILD_TESTS=ON
          -DBUILD_EXAMPLES=OFF
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build tests (Release)
        run: cmake --build build --config Release --target EntropyNetworkingTests

      - name: Run tests (ctest, verbose)
        working-directory: build
        run: ctest -C Release -VV --output-on-failure

      - name: Install package (Release)
        run: cmake --install build --config Release --prefix "${{ github.workspace }}\\EntropyNetworking-Windows-x64"

      - name: Build (Debug)
        run: cmake --build build --config Debug

      - name: Install package (Debug)
        run: cmake --install build --config Debug --prefix "${{ github.workspace }}\\EntropyNetworking-Windows-x64"

      - name: Upload CTest logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ctest-logs-windows
          path: |
            build/Testing/Temporary/LastTest.log
            build/Testing/**/Test.xml
            build/Testing/Temporary/LastTestsFailed.log

      - name: Upload Windows package artifact
        uses: actions/upload-artifact@v4
        with:
          name: EntropyNetworking-Windows-x64
          path: EntropyNetworking-Windows-x64/**

  build-and-test-linux:
    name: Build and test (Linux, GCC)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build g++ cmake

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '271a5b8850aa50f9a40269cbf3cf414b36e333d6'

      - name: Configure CMake (Ninja, Release)
        run: >
          cmake -S . -B build-release -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_TESTS=ON
          -DBUILD_EXAMPLES=OFF
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build tests (Release)
        run: cmake --build build-release --target EntropyNetworkingTests

      - name: Run tests (ctest, verbose)
        working-directory: build-release
        run: ctest -VV --output-on-failure

      - name: Install package (Release)
        run: cmake --install build-release --prefix "${{ github.workspace }}/EntropyNetworking-Linux-gcc-14"

      - name: Configure CMake (Ninja, Debug)
        run: >
          cmake -S . -B build-debug -G Ninja
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_TESTS=OFF
          -DBUILD_EXAMPLES=OFF
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build (Debug)
        run: cmake --build build-debug

      - name: Install package (Debug)
        run: cmake --install build-debug --prefix "${{ github.workspace }}/EntropyNetworking-Linux-gcc-14/debug"

      - name: Restructure debug files for vcpkg
        run: |
          cd "${{ github.workspace }}/EntropyNetworking-Linux-gcc-14/debug"
          rm -rf include share

      - name: Upload CTest logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ctest-logs-linux
          path: |
            build-release/Testing/Temporary/LastTest.log
            build-release/Testing/**/Test.xml
            build-release/Testing/Temporary/LastTestsFailed.log

      - name: Upload Linux GCC package artifact
        uses: actions/upload-artifact@v4
        with:
          name: EntropyNetworking-Linux-gcc-14
          path: EntropyNetworking-Linux-gcc-14/**

  build-macos:
    name: Build (macOS, ${{ matrix.arch }}, ${{ matrix.config }})
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
        config: [Release, Debug]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          brew update
          brew install ninja

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '271a5b8850aa50f9a40269cbf3cf414b36e333d6'

      - name: Set architecture variables
        id: arch
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            echo "cmake_arch=x86_64" >> $GITHUB_OUTPUT
            echo "triplet=x64-osx" >> $GITHUB_OUTPUT
          else
            echo "cmake_arch=arm64" >> $GITHUB_OUTPUT
            echo "triplet=arm64-osx" >> $GITHUB_OUTPUT
          fi

      - name: Configure CMake
        run: >
          cmake -S . -B build -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.config }}
          -DBUILD_TESTS=${{ matrix.arch == 'arm64' && matrix.config == 'Release' && 'ON' || 'OFF' }}
          -DBUILD_EXAMPLES=OFF
          -DVCPKG_TARGET_TRIPLET=${{ steps.arch.outputs.triplet }}
          -DCMAKE_OSX_ARCHITECTURES=${{ steps.arch.outputs.cmake_arch }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: cmake --build build

      - name: Run tests (arm64 Release only)
        if: matrix.arch == 'arm64' && matrix.config == 'Release'
        working-directory: build
        run: ctest -VV --output-on-failure

      - name: Install package
        run: cmake --install build --prefix "${{ github.workspace }}/install"

      - name: Upload CTest logs
        if: always() && matrix.arch == 'arm64' && matrix.config == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ctest-logs-macos
          path: |
            build/Testing/Temporary/LastTest.log
            build/Testing/**/Test.xml
            build/Testing/Temporary/LastTestsFailed.log

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: EntropyNetworking-macOS-${{ matrix.arch }}-${{ matrix.config }}
          path: install/**

  package-macos-universal:
    name: Create macOS universal binary
    runs-on: macos-latest
    needs: build-macos
    steps:
      - name: Download x64 Release
        uses: actions/download-artifact@v4
        with:
          name: EntropyNetworking-macOS-x64-Release
          path: install-x64-release

      - name: Download arm64 Release
        uses: actions/download-artifact@v4
        with:
          name: EntropyNetworking-macOS-arm64-Release
          path: install-arm64-release

      - name: Download x64 Debug
        uses: actions/download-artifact@v4
        with:
          name: EntropyNetworking-macOS-x64-Debug
          path: install-x64-debug

      - name: Download arm64 Debug
        uses: actions/download-artifact@v4
        with:
          name: EntropyNetworking-macOS-arm64-Debug
          path: install-arm64-debug

      - name: Create universal binaries with lipo
        run: |
          mkdir -p EntropyNetworking-macOS-universal/lib
          mkdir -p EntropyNetworking-macOS-universal/debug/lib

          # Combine Release libraries
          lipo -create \
            install-x64-release/lib/libEntropyNetworking.a \
            install-arm64-release/lib/libEntropyNetworking.a \
            -output EntropyNetworking-macOS-universal/lib/libEntropyNetworking.a

          # Combine Debug libraries
          lipo -create \
            install-x64-debug/lib/libEntropyNetworking.a \
            install-arm64-debug/lib/libEntropyNetworking.a \
            -output EntropyNetworking-macOS-universal/debug/lib/libEntropyNetworking.a

          # Copy headers and cmake files from arm64 build (they're identical)
          cp -r install-arm64-release/include EntropyNetworking-macOS-universal/
          cp -r install-arm64-release/lib/cmake EntropyNetworking-macOS-universal/lib/ || true

          # Verify universal binaries
          echo "Release library architectures:"
          lipo -info EntropyNetworking-macOS-universal/lib/libEntropyNetworking.a
          echo "Debug library architectures:"
          lipo -info EntropyNetworking-macOS-universal/debug/lib/libEntropyNetworking.a

      - name: Upload macOS universal package artifact
        uses: actions/upload-artifact@v4
        with:
          name: EntropyNetworking-macOS-universal
          path: EntropyNetworking-macOS-universal/**
